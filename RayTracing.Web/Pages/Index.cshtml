@page
@model IndexModel
@using RayTracing.CalculationModel.Models
@{
    ViewData["Title"] = "Underwater acoustic calculation";
}
<div class="card card-custom gutter-b example example-compact">
    <div class="card-header">
        <h3 class="card-title">Run calculation</h3>
    </div>
    <!--begin::Form-->
    <form method="post">
        <div class="card-body">
            @if (!Model.ModelState.IsValid)
            {
                <div class="row">
                    <div class="alert alert-custom alert-outline-2x alert-outline-danger fade show mb-5" role="alert">
                        <div class="alert-icon"><i class="flaticon-warning"></i></div>
                        <div asp-validation-summary="ModelOnly" class="text-danger alert-text"></div>
                        <div class="alert-close">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true"><i class="ki ki-close"></i></span>
                            </button>
                        </div>
                    </div>
                </div>
            }
            <div class="row">
                <div class="col-12">
                    <h6>Source</h6>
                    <hr />
                </div>
            </div>
            <div class="row">
                <div class="col-12 col-sm-6 col-md-4">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.RayStep"></label>
                        <input type="number" asp-for="AcousticProblem.RayStep" class="form-control" />
                        <span asp-validation-for="AcousticProblem.RayStep" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-4">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.SourceR"></label>
                        <input type="number" asp-for="AcousticProblem.SourceR" class="form-control" />
                        <span asp-validation-for="AcousticProblem.SourceR" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-4">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.SourceZ"></label>
                        <input type="number" asp-for="AcousticProblem.SourceZ" class="form-control" />
                        <span asp-validation-for="AcousticProblem.SourceZ" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-4">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Frequency"></label>
                        <input type="number" asp-for="AcousticProblem.Frequency" class="form-control" />
                        <span asp-validation-for="AcousticProblem.Frequency" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-4">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.RangeBoxStart"></label>
                        <input type="number" asp-for="AcousticProblem.RangeBoxStart" class="form-control" />
                        <span asp-validation-for="AcousticProblem.RangeBoxStart" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-4">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.RangeBoxEnd"></label>
                        <input type="number" asp-for="AcousticProblem.RangeBoxEnd" class="form-control" />
                        <span asp-validation-for="AcousticProblem.RangeBoxEnd" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-4">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.NumberOfThetas"></label>
                        <input step="1" type="number" asp-for="AcousticProblem.NumberOfThetas" class="form-control" />
                        <span asp-validation-for="AcousticProblem.NumberOfThetas" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-4">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Theta0"></label>
                        <input type="number" asp-for="AcousticProblem.Theta0" class="form-control" />
                        <span asp-validation-for="AcousticProblem.Theta0" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-4">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.ThetaN"></label>
                        <input type="number" asp-for="AcousticProblem.ThetaN" class="form-control" />
                        <span asp-validation-for="AcousticProblem.ThetaN" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12">
                    <div class="form-group">
                        <span class="mb-2 d-inline-block">
                            <label asp-for="AcousticProblem.Thetas"></label>
                            <button id="Calculate_Thetas_Btn" type="button" class="btn btn-sm btn-outline-primary ml-2">Calculate</button>
                        </span>
                        <textarea rows="4" asp-for="AcousticProblem.ThetasList" class="form-control"></textarea>
                        <span asp-validation-for="AcousticProblem.ThetasList" class="alert-danger"></span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    <h6>Sea surface</h6>
                    <hr />
                </div>
            </div>
            <div class="row">
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Altimetry.SurfaceType"></label>
                        <select asp-for="AcousticProblem.Altimetry.SurfaceType" class="form-control">
                            @foreach (var surfaceType in Model.SurfaceTypes)
                            {
                                <option value="@surfaceType.Id">@surfaceType.Name</option>
                            }
                        </select>
                        <span asp-validation-for="AcousticProblem.Altimetry.SurfaceType" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Altimetry.SurfacePropertyType"></label>
                        <select asp-for="AcousticProblem.Altimetry.SurfacePropertyType" class="form-control">
                            @foreach (var propertyType in Model.SurfacePropetyTypes)
                            {
                                <option value="@propertyType.Id">@propertyType.Name</option>
                            }
                        </select>
                        <span asp-validation-for="AcousticProblem.Altimetry.SurfacePropertyType" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Altimetry.SurfacePropertyType"></label>
                        <select asp-for="AcousticProblem.Altimetry.SurfaceInterpolation" class="form-control">
                            @foreach (var interpolationType in Model.SurfaceInterpolations)
                            {
                                <option value="@interpolationType.Id">@interpolationType.Name</option>
                            }
                        </select>
                        <span asp-validation-for="AcousticProblem.Altimetry.SurfaceInterpolation" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Altimetry.SurfaceAttenUnits"></label>
                        <select asp-for="AcousticProblem.Altimetry.SurfaceAttenUnits" class="form-control">
                            @foreach (var unit in Model.AttenUnits)
                            {
                                <option value="@unit.Id">@unit.Name</option>
                            }
                        </select>
                        <span asp-validation-for="AcousticProblem.Altimetry.SurfaceAttenUnits" class="alert-danger"></span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12 col-sm-6 col-md-4">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Altimetry.NumSurfaceCoords"></label>
                        <input type="number" asp-for="AcousticProblem.Altimetry.NumSurfaceCoords" class="form-control" />
                        <span asp-validation-for="AcousticProblem.Altimetry.NumSurfaceCoords" class="alert-danger"></span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Altimetry.RList"></label>
                        <textarea rows="2" asp-for="AcousticProblem.Altimetry.RList" class="form-control"></textarea>
                        <span asp-validation-for="AcousticProblem.Altimetry.RList" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Altimetry.ZList"></label>
                        <textarea rows="2" asp-for="AcousticProblem.Altimetry.ZList" class="form-control"></textarea>
                        <span asp-validation-for="AcousticProblem.Altimetry.ZList" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Altimetry.CpList"></label>
                        <textarea rows="2" asp-for="AcousticProblem.Altimetry.CpList" class="form-control"></textarea>
                        <span asp-validation-for="AcousticProblem.Altimetry.CpList" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Altimetry.CsList"></label>
                        <textarea rows="2" asp-for="AcousticProblem.Altimetry.CsList" class="form-control"></textarea>
                        <span asp-validation-for="AcousticProblem.Altimetry.CsList" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Altimetry.ApList"></label>
                        <textarea rows="2" asp-for="AcousticProblem.Altimetry.ApList" class="form-control"></textarea>
                        <span asp-validation-for="AcousticProblem.Altimetry.ApList" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Altimetry.AsList"></label>
                        <textarea rows="2" asp-for="AcousticProblem.Altimetry.AsList" class="form-control"></textarea>
                        <span asp-validation-for="AcousticProblem.Altimetry.AsList" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Altimetry.RhoList"></label>
                        <textarea rows="2" asp-for="AcousticProblem.Altimetry.RhoList" class="form-control"></textarea>
                        <span asp-validation-for="AcousticProblem.Altimetry.RhoList" class="alert-danger"></span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    <h6>Sound speed</h6>
                    <hr />
                </div>
            </div>
            <div class="row">
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.NumberOfSSPPoints"></label>
                        <input type="number" asp-for="AcousticProblem.NumberOfSSPPoints" class="form-control" />
                        <span asp-validation-for="AcousticProblem.NumberOfSSPPoints" class="alert-danger"></span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.SoundSpeed.SoundSpeedDistribution"></label>
                        <select asp-for="AcousticProblem.SoundSpeed.SoundSpeedDistribution" class="form-control">
                            @foreach (var ssc in Model.SoundSpeedDistributions)
                            {
                                <option value="@ssc.Id">@ssc.Name</option>
                            }
                        </select>
                        <span asp-validation-for="AcousticProblem.Altimetry.SurfaceAttenUnits" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.SoundSpeed.SoundSpeedClass"></label>
                        <select asp-for="AcousticProblem.SoundSpeed.SoundSpeedClass" class="form-control">
                            @foreach (var ssc in Model.SoundSpeedClasses)
                            {
                                <option value="@ssc.Id">@ssc.Name</option>
                            }
                        </select>
                        <span asp-validation-for="AcousticProblem.Altimetry.SurfaceAttenUnits" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.SoundSpeed.NumberOfPointsInRange"></label>
                        <input type="number" asp-for="AcousticProblem.SoundSpeed.NumberOfPointsInRange" class="form-control" />
                        <span asp-validation-for="AcousticProblem.SoundSpeed.NumberOfPointsInRange" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.SoundSpeed.NumberOfPointsInDepth"></label>
                        <input type="number" asp-for="AcousticProblem.SoundSpeed.NumberOfPointsInDepth" class="form-control" />
                        <span asp-validation-for="AcousticProblem.SoundSpeed.NumberOfPointsInDepth" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.SoundSpeed.RList"></label>
                        <textarea rows="2" asp-for="AcousticProblem.SoundSpeed.RList" class="form-control"></textarea>
                        <span asp-validation-for="AcousticProblem.SoundSpeed.RList" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.SoundSpeed.ZList"></label>
                        <textarea rows="2" asp-for="AcousticProblem.SoundSpeed.ZList" class="form-control"></textarea>
                        <span asp-validation-for="AcousticProblem.SoundSpeed.ZList" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12" id="C1DList">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.SoundSpeed.C1DList"></label>
                        <textarea rows="2" asp-for="AcousticProblem.SoundSpeed.C1DList" class="form-control"></textarea>
                        <span asp-validation-for="AcousticProblem.SoundSpeed.C1DList" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12" id="C2DList">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.SoundSpeed.C2DList"></label>
                        <textarea rows="2" asp-for="AcousticProblem.SoundSpeed.C2DList" class="form-control"></textarea>
                        <span asp-validation-for="AcousticProblem.SoundSpeed.C2DList" class="alert-danger"></span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    <h6>Sea bottom</h6>
                    <hr />
                </div>
            </div>
            <div class="row">
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Batimetry.SurfaceType"></label>
                        <select asp-for="AcousticProblem.Batimetry.SurfaceType" class="form-control">
                            @foreach (var surfaceType in Model.SurfaceTypes)
                            {
                                <option value="@surfaceType.Id">@surfaceType.Name</option>
                            }
                        </select>
                        <span asp-validation-for="AcousticProblem.Batimetry.SurfaceType" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Batimetry.SurfacePropertyType"></label>
                        <select asp-for="AcousticProblem.Batimetry.SurfacePropertyType" class="form-control">
                            @foreach (var propertyType in Model.SurfacePropetyTypes)
                            {
                                <option value="@propertyType.Id">@propertyType.Name</option>
                            }
                        </select>
                        <span asp-validation-for="AcousticProblem.Batimetry.SurfacePropertyType" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Batimetry.SurfacePropertyType"></label>
                        <select asp-for="AcousticProblem.Batimetry.SurfaceInterpolation" class="form-control">
                            @foreach (var interpolationType in Model.SurfaceInterpolations)
                            {
                                <option value="@interpolationType.Id">@interpolationType.Name</option>
                            }
                        </select>
                        <span asp-validation-for="AcousticProblem.Batimetry.SurfaceInterpolation" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Batimetry.SurfaceAttenUnits"></label>
                        <select asp-for="AcousticProblem.Batimetry.SurfaceAttenUnits" class="form-control">
                            @foreach (var unit in Model.AttenUnits)
                            {
                                <option value="@unit.Id">@unit.Name</option>
                            }
                        </select>
                        <span asp-validation-for="AcousticProblem.Batimetry.SurfaceAttenUnits" class="alert-danger"></span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12 col-sm-6 col-md-4">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Batimetry.NumSurfaceCoords"></label>
                        <input type="number" asp-for="AcousticProblem.Batimetry.NumSurfaceCoords" class="form-control" />
                        <span asp-validation-for="AcousticProblem.Batimetry.NumSurfaceCoords" class="alert-danger"></span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Batimetry.RList"></label>
                        <textarea rows="2" asp-for="AcousticProblem.Batimetry.RList" class="form-control"></textarea>
                        <span asp-validation-for="AcousticProblem.Batimetry.RList" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Batimetry.ZList"></label>
                        <textarea rows="2" asp-for="AcousticProblem.Batimetry.ZList" class="form-control"></textarea>
                        <span asp-validation-for="AcousticProblem.Batimetry.ZList" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Batimetry.CpList"></label>
                        <textarea rows="2" asp-for="AcousticProblem.Batimetry.CpList" class="form-control"></textarea>
                        <span asp-validation-for="AcousticProblem.Batimetry.CpList" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Batimetry.CsList"></label>
                        <textarea rows="2" asp-for="AcousticProblem.Batimetry.CsList" class="form-control"></textarea>
                        <span asp-validation-for="AcousticProblem.Batimetry.CsList" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Batimetry.ApList"></label>
                        <textarea rows="2" asp-for="AcousticProblem.Batimetry.ApList" class="form-control"></textarea>
                        <span asp-validation-for="AcousticProblem.Batimetry.ApList" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Batimetry.AsList"></label>
                        <textarea rows="2" asp-for="AcousticProblem.Batimetry.AsList" class="form-control"></textarea>
                        <span asp-validation-for="AcousticProblem.Batimetry.AsList" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Batimetry.RhoList"></label>
                        <textarea rows="2" asp-for="AcousticProblem.Batimetry.RhoList" class="form-control"></textarea>
                        <span asp-validation-for="AcousticProblem.Batimetry.RhoList" class="alert-danger"></span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    <h6>Hydrophones</h6>
                    <hr />
                </div>
            </div>
            <div class="row">
                <div class="col-12 col-sm-6 col-md-4">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.HydrophoneArrayType"></label>
                        <select asp-for="AcousticProblem.HydrophoneArrayType" class="form-control">
                            @foreach (var arrayType in Model.ArrayTypes)
                            {
                                <option value="@arrayType.Id">@arrayType.Name</option>
                            }
                        </select>
                        <span asp-validation-for="AcousticProblem.Altimetry.SurfaceAttenUnits" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-4">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.NumberOfHydrophonesAlongRange"></label>
                        <input type="number" asp-for="AcousticProblem.NumberOfHydrophonesAlongRange" class="form-control" />
                        <span asp-validation-for="AcousticProblem.NumberOfHydrophonesAlongRange" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-4">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.NumberOfHydrophonesAlogDepth"></label>
                        <input type="number" asp-for="AcousticProblem.NumberOfHydrophonesAlogDepth" class="form-control" />
                        <span asp-validation-for="AcousticProblem.NumberOfHydrophonesAlogDepth" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.HydrophoneRangesList"></label>
                        <textarea rows="2" asp-for="AcousticProblem.HydrophoneRangesList" class="form-control"></textarea>
                        <span asp-validation-for="AcousticProblem.HydrophoneRangesList" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.HydrophoneDepthsList"></label>
                        <textarea rows="2" asp-for="AcousticProblem.HydrophoneDepthsList" class="form-control"></textarea>
                        <span asp-validation-for="AcousticProblem.HydrophoneDepthsList" class="alert-danger"></span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    <h6>Output</h6>
                    <hr />
                </div>
            </div>
            <div class="row">
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.CalculationType"></label>
                        <select asp-for="AcousticProblem.CalculationType" class="form-control">
                            @foreach (var calculationType in Model.CalculationTypes)
                            {
                                <option value="@calculationType.Id">@calculationType.Name</option>
                            }
                        </select>
                        <span asp-validation-for="AcousticProblem.CalculationType" class="alert-danger"></span>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-6">
                    <div class="form-group">
                        <label asp-for="AcousticProblem.Threshold"></label>
                        <input type="number" asp-for="AcousticProblem.Threshold" class="form-control" />
                        <span asp-validation-for="AcousticProblem.Threshold" class="alert-danger"></span>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-footer">
            <button type="submit" id="submit_Btn" class="btn btn-light-success mr-2">Submit</button>
        </div>
    </form>
    <div id="plot-ssp">
    </div>
    <div id="plot-rayCoords">
    </div>
    <div id="plot-eigenrays">
    </div>
    <div id="plot-tl">
    </div>
    <!--end::Form-->
</div>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
    <script src="~/lib/plotly-2.4.2.min.js"></script>
    <script>
        $(function () {
            $('#AcousticProblem_SoundSpeed_SoundSpeedDistribution').change((e) => {
                const value = e.target.value;

                const oneDimensionalWrapper = $("#C1DList");
                const twoDimensionalWrapper = $("#C2DList");

                const oneDimensionalInput = $("#AcousticProblem_SoundSpeed_C1DList");
                const twoDimensionalInput = $("#AcousticProblem_SoundSpeed_C2DList");

                if (value == 0) {
                    oneDimensionalWrapper.show();
                    twoDimensionalWrapper.hide();

                    oneDimensionalInput.prop("disabled", false);
                    twoDimensionalInput.prop("disabled", true);
                    oneDimensionalInput.prop("readonly", false);
                    twoDimensionalInput.prop("readonly", true);

                    oneDimensionalInput.prop("data-val", true);
                    twoDimensionalInput.prop("data-val", false);
                }
                else {
                    oneDimensionalWrapper.hide();
                    twoDimensionalWrapper.show();

                    oneDimensionalInput.prop("disabled", true);
                    twoDimensionalInput.prop("disabled", false);
                    oneDimensionalInput.prop("readonly", true);
                    twoDimensionalInput.prop("readonly", false);

                    oneDimensionalInput.prop("data-val", false);
                    twoDimensionalInput.prop("data-val", true);
                }
            });

            $('#AcousticProblem_SoundSpeed_SoundSpeedDistribution').change();

            $('#Calculate_Thetas_Btn').click(() => {
                const theta0 = Number($("#AcousticProblem_Theta0").val() || 0);
                const thetaN = Number($("#AcousticProblem_ThetaN").val() || 0);
                const nOfThetas = Number($("#AcousticProblem_NumberOfThetas").val() || 0);

                const thetas = [];
                let dtheta = 0;

                if (nOfThetas == 0 || (theta0 == 0 && thetaN == 0)) {
                    return;
                }

                if (nOfThetas == 1) {
                    thetas.push(theta0);
                    dtheta = 0;
                }
                else if (nOfThetas == 2) {
                    thetas.push(theta0);
                    thetas.push(thetaN);
                    dtheta = thetaN - theta0;
                }
                else {
                    thetas.push(theta0);
                    dtheta = (thetaN - theta0) / (nOfThetas - 1);

                    for (let i = 1; i <= nOfThetas - 2; i++) {
                        thetas.push(theta0 + dtheta * (i));
                    }

                    thetas.push(thetaN);
                }

                $("#AcousticProblem_ThetasList").val(thetas.map(t => Number(t).toFixed(3)).join(' '));
            });

            const buildRayCoordsPlot = (data) => {
                const {
                    rays,
                    depthStart,
                    depthEnd,
                    rangeStart,
                    rangeEnd,
                    surfaceR,
                    surfaceZ,
                    bottomR,
                    bottomZ,
                    sourceR,
                    sourceZ } = data;

                const plotData = rays.map(ray => ({
                    x: ray.r,
                    y: ray.z,
                    type: 'scatter',
                    line: {
                        width: 1
                    }
                }));

                plotData.push({
                    x: surfaceR,
                    y: surfaceZ,
                    type: 'scatter',
                    line: {
                        color: 'rgb(9, 195, 219)',
                        width: 2
                    }
                });

                plotData.push({
                    x: bottomR,
                    y: bottomZ,
                    type: 'scatter',
                    line: {
                        color: 'rgb(69, 51, 31)',
                        width: 3
                    }
                });

                plotData.push({
                    x: [sourceR],
                    y: [sourceZ],
                    type: 'markers',
                    name: 'Source',
                    marker: {
                        size: 25,
                        color: 'rgb(248, 252, 3)',
                        symbol: ['hexagram']
                   }
                });

                const layout = {
                    title: "Rays",
                    xaxis: {
                        range: [rangeStart, rangeEnd]
                    },
                    yaxis: {
                        range: [depthEnd, depthStart]
                    },
                    showlegend: false
                };

                Plotly.newPlot('plot-rayCoords', plotData, layout, { responsive: true });
            }

            const buildSSPPlot = (data) => {
                const {
                    sspc,
                    sspz,
                    bottomR,
                    bottomZ} = data;

                const plotData = [{
                    x: sspc,
                    y: sspz,
                    type: 'scatter',
                    mode:'lines'
                }];

                plotData.push({
                    x: bottomR,
                    y: bottomZ,
                    type: 'scatter',
                    line: {
                        color: 'rgb(69, 51, 31)',
                        width: 3
                    }
                });

                const layout = {
                    title: "Sound speed",
                    xaxis: {
                        range: [Math.min(...sspc), Math.max(...sspc)]
                    },
                    yaxis: {
                        range: [Math.max(...sspz), Math.min(...sspz)]
                    },
                    showlegend: false
                };

                Plotly.newPlot('plot-ssp', plotData, layout, { responsive: true });
            }

            const buildEigenraysPlot = (data) => {
                const {
                    eigenrays,
                    depthStart,
                    depthEnd,
                    rangeStart,
                    rangeEnd,
                    bottomR,
                    bottomZ,
                    surfaceR,
                    surfaceZ,
                    sourceR,
                    sourceZ,
                    hydrophoneRanges,
                    hydrophoneDepths} = data;

                const plotData = eigenrays.map(ray => ({
                    x: ray.r,
                    y: ray.z,
                    type: 'scatter',
                    line: {
                        width: 1
                    }
                }));

                plotData.push({
                    x: bottomR,
                    y: bottomZ,
                    type: 'scatter',
                    line: {
                        color: 'rgb(69, 51, 31)',
                        width: 3
                    }
                });

                plotData.push({
                    x: surfaceR,
                    y: surfaceZ,
                    type: 'scatter',
                    line: {
                        color: 'rgb(9, 195, 219)',
                        width: 2
                    }
                });

                plotData.push({
                    x: [sourceR],
                    y: [sourceZ],
                    type: 'markers',
                    name: 'Source',
                    marker: {
                        size: 25,
                        color: 'rgb(248, 252, 3)',
                        symbol: ['hexagram'],
                    }
                });

                plotData.push({
                    x: hydrophoneRanges,
                    y: hydrophoneDepths,
                    type: 'scatter',
                    mode: 'markers',
                    marker: {
                        size: 10,
                        symbol: ['circle'],
                    }
                });

                const layout = {
                    title: "Eigenrays",
                    xaxis: {
                        range: [rangeStart, rangeEnd]
                    },
                    yaxis: {
                        range: [depthEnd, depthStart]
                    },
                    showlegend: false
                };

                Plotly.newPlot('plot-eigenrays', plotData, layout, { responsive: true });
            }

            const buildTLPlot = (data) => {
                const {
                    tL1D,
                    tL2D,
                    arrayType,
                    arrayR,
                    arrayZ,
                    depthStart,
                    depthEnd,
                    rangeStart,
                    rangeEnd,
                    bottomR,
                    bottomZ,
                    sourceR,
                    sourceZ } = data;

                if (arrayType != "@ArrayType.Linear") {
                    const plotData = [
                        {
                            z: tL2D,
                            x: arrayR,
                            y: arrayZ,
                            type: 'heatmap',
                        }
                    ];

                    plotData.push({
                        x: bottomR,
                        y: bottomZ,
                        type: 'scatter',
                        line: {
                            color: 'rgb(69, 51, 31)',
                            width: 3
                        }
                    })

                    plotData.push({
                        x: [sourceR],
                        y: [sourceZ],
                        name: 'Source',
                        type: 'markers',
                        marker: {
                            size: 25,
                            color: 'rgb(248, 252, 3)',
                            symbol: ['hexagram']
                        }
                    });

                    const layout = {
                        title: "TL",
                        xaxis: {
                            range: [rangeStart, rangeEnd]
                        },
                        yaxis: {
                            range: [depthEnd, depthStart]
                        },
                        showlegend: false
                    };

                    Plotly.newPlot('plot-tl', plotData, layout, { responsive: true });
                }
                else {
                    const plotData = [
                        {
                            z: arrayZ.map(() => tL1D),
                            x: arrayZ,
                            y: arrayR,
                            type: 'heatmap',
                            hoverongaps: true
                        }
                    ];

                    plotData.push({
                        y: [sourceR],
                        x: [sourceZ],
                        name: 'Source',
                        type: 'markers',
                        marker: {
                            size: 25,
                            color: 'rgb(248, 252, 3)',
                            symbol: ['hexagram']
                        }
                    });

                    plotData.push({
                        x: arrayZ,
                        y: arrayR,
                        type: 'scatter',
                        mode: 'markers',
                        marker: {
                            size: 10,
                            symbol: ['circle'],
                        }
                    });

                    const layout = {
                        title: "TL",
                        yaxis: {
                            range: [arrayR[0], arrayR[arrayR.length-1]]
                        },
                        xaxis: {
                            range: [arrayZ[0], arrayZ[arrayZ.length - 1]]
                        },
                        showlegend: false
                    };

                    Plotly.newPlot('plot-tl', plotData, layout, { responsive: true });
                }
            }

            $('#submit_Btn').on('click', function (evt) {
                evt.preventDefault();

                $("#submit_Btn").prop('disabled', true);
                $('div[id^="plot"]').empty();

                if ($('form').valid()) {
                    $.post('', $('form').serialize())
                    .done(function (response) {
                        const { calculationType } = response;
                        switch (calculationType) {
                            case "@CalculationType.RayCoords.ToString()":
                                buildRayCoordsPlot(response);
                                break;
                            case "@CalculationType.EigenraysProximity.ToString()":
                            case "@CalculationType.EigenraysRegFalsi.ToString()":
                                buildEigenraysPlot(response);
                                break;
                            case "@CalculationType.CohTransmissionLoss.ToString()":
                                buildTLPlot(response);
                            case "@CalculationType.SoundSpeedProfile.ToString()":
                                buildSSPPlot(response);
                            default:
                                break;
                        };

                    })
                    .fail(function (error) {
                        console.log(error);
                    })
                    .always(function () {
                        $("#submit_Btn").prop('disabled', false);
                    });
                }
            });
        });
    </script>
}
